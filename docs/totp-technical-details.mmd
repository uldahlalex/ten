sequenceDiagram
    participant A as Authenticator App
    participant T as Time Source
    participant S as Server
    participant DB as Database

    rect rgb(0, 0, 0, 0)
        Note over A,S: TOTP ALGORITHM TECHNICAL IMPLEMENTATION
        
        Note over A,T: 1. TIME SYNCHRONIZATION
        A->>T: Get current Unix timestamp
        Note over A: Example: 1672531343 (seconds since 1970-01-01)
        
        Note over A: 2. TIME STEP CALCULATION
        Note over A: time_step = floor(timestamp ÷ 30)<br/>Example: floor(1672531343 ÷ 30) = 55751044
        
        Note over A: 3. HMAC-SHA1 COMPUTATION
        Note over A: Input: Base32 secret + time_step<br/>secret = "JBSWY3DPEHPK3PXP" (Base32)<br/>decoded = [72, 101, 108, 108, 111, 33, 222, 173, 190, 239] (bytes)
        Note over A: hmac = HMAC-SHA1(secret_bytes, time_step)<br/>Result: 20-byte hash
        
        Note over A: 4. DYNAMIC TRUNCATION
        Note over A: offset = last_byte_of_hmac & 0x0F<br/>Extract 4 bytes starting at offset<br/>Apply mask: result & 0x7FFFFFFF<br/>Take modulo 1,000,000 → 6 digits<br/>Example result: "847591"
    end

    rect rgb(0, 0, 0, 0)
        Note over S,DB: SERVER-SIDE VALIDATION PROCESS
        
        Note over S: RECEIVE TOTP CODE FROM CLIENT
        Note over S: User submits: "847591"
        
        Note over S: GET STORED SECRET
        S->>DB: SELECT totp_secret FROM users WHERE id = ?
        DB-->>S: Return: "JBSWY3DPEHPK3PXP" (Base32)
        
        Note over S: GENERATE EXPECTED CODES
        Note over S: Current time step: T = 55751044
        Note over S: Generate codes for window: [T-1, T, T+1]<br/>This allows ±30 seconds clock drift
        
        loop For each time step in window
            Note over S: time_step ∈ [55751043, 55751044, 55751045]
            Note over S: expected_code = TOTP_algorithm(secret, time_step)
            Note over S: Compare with user's "847591"
        end
        
        alt Code matches any in window
            Note over S: ✅ VALID - Accept login/operation
        else No match in window  
            Note over S: ❌ INVALID - Reject with error
        end
    end

    rect rgb(0, 0, 0, 0)
        Note over A,S: SYNCHRONIZATION & EDGE CASES
        
        Note over A,S: CLOCK DRIFT TOLERANCE
        Note over A: Phone time: 15:42:23
        Note over S: Server time: 15:42:24 (1 second ahead)
        Note over A,S: Both generate codes for same 30-second window<br/>±1 window tolerance handles small drifts
        
        Note over A,S: TIME WINDOW BOUNDARIES
        Note over A,S: Window changes every 30 seconds:<br/>15:42:00-15:42:29 → code "123456"<br/>15:42:30-15:42:59 → code "789012"<br/>User has 90 seconds to use any code
        
        Note over A,S: REPLAY ATTACK PREVENTION
        Note over S: Server could track used codes<br/>(not implemented in current system)<br/>Time-based expiry provides basic protection
    end